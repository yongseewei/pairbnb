c
@message
c
params[:bot]
params
c
params
c
params[:bot][:body] = 23
params[:bot][:body] 
params[:bot] = {}
params[:bot]
params[:bot] = 123
params[:bot]
params[:bot][:body] 
params
param
c
response[:result][:fulfillment][:speech]
c
response[:result][:fulfillment][:speech]
response[:result]
response
reponse
c
response
response[:result]
response.result
response
params
c
response
c
response
c
params
c
params
c
current_user.messages
current_user.message
c
current_user.message
current_user.messages
current_user
c
puts "132" unless @list
puts "132" if @list
if @list
@list.nil?
unless @list
current_user.listings.find_by(id: params[:listing_id])
params
current_user
@list
c
params
c
params
c
params
c
params
url_for
url_options
url
action
action_name
controller_name
c
@list
@reservation.valid?
c
params
c
current_user.reservations.build
controller_name
listing_id
:listing_id
params
c
params
c
params
c
current_user.listings
current_user
current_user.role
current_user
c
a
a[0]
a.length
a.class
a
a.count
a = current_user.listings.find_by(id: params[:listing_id])
current_user.listings.find_by(id: params[:listing_id])
current_user.listings.find_by(id: params[:listing_id]).count
current_user.listings.find_by(id: params[:listing_id])
@reservations.count
@reservations.user
@reservations.class
@reservations.lists
@reservations.listing
@reservations.list
@reservations
c
current_user
controller_path
params
controller_name
c
action_name
controller_name
c
list_params
params
c
params
c
@list1
@user
c
user
c
userc
user
c
FactoryGirl.create(:user).id 
a
a = FactoryGirl.create(:user) 
FactoryGirl.create(:user) 
User
user
current_user
user
User
c
listing_path(@list)
listing_path
@list
listing_path
c
current_user
c
@list
:list
assigns(:list)
c
params
c
a.results
a = Listing.search(@search,order: [{created_at: {order: :desc, ignore_unmapped: true}}], fields: [:title, :tags_name], match: :word_start)
@search="*"
a.results
a = Listing.search(@search,order: [{created_at: {order: :desc, ignore_unmapped: true}}], fields: [:title, :tags_name], match: :word_start)
Listing.search(@search,order: [{created_at: {order: :desc, ignore_unmapped: true}}], fields: [:title, :tags_name], match: :word_start)
@search
@lists.results
@lists
@lsits
params
c
params
list
c
params[:query]
params
c
params
c
params
c
params
c
params
c
params
c
params
search
c
search
@lists.results.length
@lists.results
@lists
@lists.each
@lists
c
@lists_js[1]
@lists_js.length
@lists_js
c
(@lists[0].tag_list & be).sort == be.sort
(@lists[1].tag_list & be).sort == be.sort
(@lists[2].tag_list & be).sort == be.sort
(@lists[3].tag_list & be).sort == be.sort
(@lists[3].tag_list & be).sort == be
(@lists[3].tag_list & be) == be
be
(@lists[3].tag_list & be) 
(@lists[3].tag_list & be) == be
@lists[2].tag_list - be
@lists[3].tag_list - be
@lists[3].tag_list.to_a.contains_all?(be) 
@lists[3].tag_list.to_a
@lists[3].tag_list.class
@lists[3].tag_list.contains_all?(be) 
@lists[3].tag_list.include?(["non-pet","non-smoker"]) 
@lists[3].tag_list.include?("non-pet","non-smoker") 
@lists[3].tag_list.include?("non-pet") 
@lists[3].tag_list.include?(be) 
@lists[2].tag_list.include?(be) 
be
@lists[2].tag_list 
@lists[3].tag_list 
@lists[3].tag_list == be
@lists[2].tag_list == be
@lists[1].tag_list == be
@lists[0].tag_list == be
@lists[0].tags
@lists.results
@lists.results.tags
@lists[0].tags
@lists[0].tag_list
@lists[0].tagged_with("non-smoker")
@lists[0]
@lists
@Lists
List
a.to_a
a
a.to_a
a.count
a.tags_name
a.aggs["tags_name"]["buckets"].class
a.aggs["tags_name"]["buckets"]["key"]
a.aggs["tags_name"]["key"]
a.aggs["tags_name"]["buckets"].length
a.aggs["tags_name"]["buckets"]
a.aggs["tags_name"].length
a.aggs["tags_name"]
a.aggs.length
a.aggs["Taiwan"]
a.aggs
a
a.aggs
a = Listing.search search, aggs: [:tags_name]
a.length
a = Listing.search search, where: {tags_name: be}
a.length
a = Listing.search search, where: {tags_name: be}
a.length
a = Listing.search search, where: {or: [tags_name: be]}
a = Listing.search search, where: {or: tags_name: be}
